{"version":3,"sources":["components/Header.js","components/Grid.js","components/Buttons.js","App.js","index.js"],"names":["Header","Grid","grid","setGrid","numCols","generations","numRows","useState","mouseIsPressed","setMouseIsPressed","className","style","width","gridTemplateColumns","map","rows","i","col","j","key","backgroundColor","onMouseDown","newGrid","produce","gridCopy","handleMouseDown","onMouseEnter","handleMouseEnter","onMouseUp","Buttons","intervalId","setGenerations","handleClick","event","name","target","Math","floor","random","running","setRunning","useEffect","clearInterval","setInterval","play","runningRef","useRef","current","gridRef","neighbours","prev","Button","variant","size","onClick","borderRadius","fontWeight","letterSpacing","height","App","push","Array","from","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2ae6ae9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Conway's Game of Life</h1>\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport produce from \"immer\";\r\n\r\nfunction Grid({ grid, setGrid, numCols, numRows, generations }) {\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n\r\n  const handleMouseDown = (i, j) => {\r\n    const newGrid = produce(grid, (gridCopy) => {\r\n      gridCopy[i][j] = !gridCopy[i][j];\r\n    });\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n  };\r\n\r\n  const handleMouseEnter = (i, j) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = produce(grid, (gridCopy) => {\r\n      gridCopy[i][j] = !gridCopy[i][j];\r\n    });\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"grid\"\r\n        style={{\r\n          width: 900,\r\n          gridTemplateColumns: `repeat(${numCols}, 15px)`,\r\n        }}\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, j) => (\r\n            <div\r\n              key={`${i}-${j}`}\r\n              className=\"box\"\r\n              style={{\r\n                backgroundColor: grid[i][j] ? \"#ef233c\" : \"#000\",\r\n              }}\r\n              onMouseDown={() => handleMouseDown(i, j)}\r\n              onMouseEnter={() => handleMouseEnter(i, j)}\r\n              onMouseUp={() => handleMouseUp()}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <h4>{generations} Generations</h4>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport produce from \"immer\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst speed = 150;\r\n\r\nfunction Buttons({\r\n  grid,\r\n  setGrid,\r\n  numCols,\r\n  numRows,\r\n  generations,\r\n  setGenerations,\r\n}) {\r\n  const handleClick = (event) => {\r\n    const { name } = event.target;\r\n    const newGrid = produce(grid, (gridCopy) => {\r\n      for (let i = 0; i < numRows; i++) {\r\n        for (let j = 0; j < numCols; j++) {\r\n          if (name === \"seed\") {\r\n            if (Math.floor(Math.random() * 4) === 1) {\r\n              gridCopy[i][j] = true;\r\n            }\r\n          }\r\n          if (name === \"clear\") {\r\n            gridCopy[i][j] = false;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    setGrid(newGrid);\r\n    if (name === \"clear\") {\r\n      setGenerations(0);\r\n    }\r\n  };\r\n\r\n  let intervalId;\r\n\r\n  const [running, setRunning] = useState(false);\r\n\r\n  const playButton = () => {\r\n    clearInterval(intervalId);\r\n    intervalId = setInterval(play, speed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    playButton();\r\n  }, []);\r\n\r\n  const pauseButton = () => {\r\n    setRunning(!running);\r\n    clearInterval(intervalId);\r\n  };\r\n\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n\r\n  const gridRef = useRef(grid);\r\n  gridRef.current = grid;\r\n  const play = () => {\r\n    if (!runningRef.current) return;\r\n    const newGrid = produce(gridRef.current, (gridCopy) => {\r\n      for (let i = 0; i < numRows; i++) {\r\n        for (let j = 0; j < numCols; j++) {\r\n          let neighbours = 0;\r\n\r\n          if (i > 0) if (gridRef.current[i - 1][j]) neighbours++;\r\n          if (i > 0 && j > 0) if (gridRef.current[i - 1][j - 1]) neighbours++;\r\n          if (i > 0 && j < numCols - 1)\r\n            if (gridRef.current[i - 1][j + 1]) neighbours++;\r\n          if (j < numCols - 1) if (gridRef.current[i][j + 1]) neighbours++;\r\n          if (j > 0) if (gridRef.current[i][j - 1]) neighbours++;\r\n          if (i < numRows - 1) if (gridRef.current[i + 1][j]) neighbours++;\r\n          if (i < numRows - 1 && j > 0)\r\n            if (gridRef.current[i + 1][j - 1]) neighbours++;\r\n          if (i < numRows - 1 && j < numCols - 1)\r\n            if (gridRef.current[i + 1][j + 1]) neighbours++;\r\n          if (gridRef.current[i][j] && (neighbours < 2 || neighbours > 3))\r\n            gridCopy[i][j] = false;\r\n          if (!gridRef.current[i][j] && neighbours === 3) gridCopy[i][j] = true;\r\n        }\r\n      }\r\n    });\r\n    setGrid(newGrid);\r\n    setGenerations((prev) => prev + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"buttons\">\r\n      <Button\r\n        variant=\"outline-secondary\"\r\n        name=\"seed\"\r\n        size=\"sm\"\r\n        onClick={handleClick}\r\n        style={{\r\n          borderRadius: \"30px\",\r\n          fontWeight: \"bold\",\r\n          letterSpacing: \"3px\",\r\n          height: \"30px\",\r\n        }}\r\n      >\r\n        SEED\r\n      </Button>\r\n      <Button\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n        onClick={pauseButton}\r\n        style={{\r\n          borderRadius: \"30px\",\r\n          fontWeight: \"bold\",\r\n          letterSpacing: \"3px\",\r\n          height: \"30px\",\r\n        }}\r\n      >\r\n        {running ? \"PAUSE\" : \"PLAY\"}\r\n      </Button>\r\n      <Button\r\n        variant=\"outline-secondary\"\r\n        size=\"sm\"\r\n        name=\"clear\"\r\n        onClick={handleClick}\r\n        style={{\r\n          borderRadius: \"30px\",\r\n          fontWeight: \"bold\",\r\n          letterSpacing: \"3px\",\r\n          height: \"30px\",\r\n        }}\r\n      >\r\n        CLEAR\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Grid from \"./components/Grid\";\nimport Buttons from \"./components/Buttons\";\n\nfunction App() {\n  const numRows = 30;\n  const numCols = 60;\n\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => false));\n    }\n    return rows;\n  });\n\n  const [generations, setGenerations] = useState(0);\n\n  return (\n    <div>\n      <Header />\n      <Buttons\n        grid={grid}\n        setGrid={setGrid}\n        numRows={numRows}\n        numCols={numCols}\n        generations={generations}\n        setGenerations={setGenerations}\n      />\n      <Grid\n        grid={grid}\n        setGrid={setGrid}\n        numRows={numRows}\n        numCols={numCols}\n        generations={generations}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}